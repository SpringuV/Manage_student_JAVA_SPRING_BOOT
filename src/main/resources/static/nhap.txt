
    // rest api

//    @GetMapping
//    public List<School> getAllSchool(){
//        return this.schoolService.getAllSchools();
//    }
//    @GetMapping("/find-name/{name}")
//    public List<School> getListSchoolName(@PathVariable String name){
//        return schoolService.findListSchoolByNamePattern(name);
//    }
//
//    @GetMapping("/find-id/{id}")
//    public School getSchoolName(@PathVariable int id){
//        return schoolService.getSchoolById(id);
//    }
//    // add school
//    @PostMapping("/add")
//    public ResponseEntity<School> addSchool(@RequestBody School school){ // tu dong bien json thanh students
//        school.setId(0); //bat buoc them moi va tu phat sinh ra id khi khach hang co nhap id
//        school = schoolService.addSchool(school);
//        return ResponseEntity.status(HttpStatus.CREATED).body(school);
//    }
//
//    // modify school
//    @PutMapping("/modify/{id}")
//    public ResponseEntity<School> updateSchool(@PathVariable int id, @RequestBody School school){
//        School existSchool = schoolService.getSchoolById(id);
//        if(existSchool != null) {
//            existSchool.setName(school.getName());
//            existSchool.setAddress(school.getAddress());
//            existSchool.setPhone(school.getPhone());
//            existSchool.setTeacherList(school.getTeacherList());
//            existSchool.setClassesList(school.getClassesList());
//            existSchool.setStudentList(school.getStudentList());
//            existSchool.setSubjectList(school.getSubjectList());
//            schoolService.updateSchool(existSchool);
//            return ResponseEntity.ok(existSchool);
//        } else {
//            try {
//                throw new Exception("Not found school have id: "+ id);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        }
//    }
//
//    // delete school
//    @DeleteMapping("/modify/delete/{id}")
//    public ResponseEntity<School> deleteSchoolByID(@PathVariable int id){
//        School existSchool = schoolService.getSchoolById(id);
//        if(existSchool != null) {
//            schoolService.deleteSchoolById(id);
//            return ResponseEntity.ok().build();
//            // tim cach in ra error point
//        } else {
//            try {
//                throw new Exception("Not found school have id: "+ id);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        }
//    }
    // @PutMapping("/modify/{id}")
//    public ResponseEntity<School> updateSchool(@PathVariable int id, @RequestBody School school){
//        School existSchool = schoolService.getSchoolById(id);
//        if(existSchool != null) {
//            existSchool.setName(school.getName());
//            existSchool.setAddress(school.getAddress());
//            existSchool.setPhone(school.getPhone());
//            existSchool.setTeacherList(school.getTeacherList());
//            existSchool.setClassesList(school.getClassesList());
//            existSchool.setStudentList(school.getStudentList());
//            existSchool.setSubjectList(school.getSubjectList());
//            schoolService.updateSchool(existSchool);
//            return ResponseEntity.ok(existSchool);
//        } else {
//            try {
//                throw new Exception("Not found school have id: "+ id);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        }
//    }


-- user
//    @PostConstruct
//    public void insertUser(){
//        User user1 = new User();
//        user1.setUsername("vutran");
//        user1.setPassword("$2a$12$ERJ6wlxdoPx5bcUPTrslOelMYR/wKxAqj8YdUrj855rRsiJZlHpYC");
//        user1.setEnabled(true);
//
//        Authority role1 = new Authority();
//        role1.setName("ROLE_USER");
//
//        Collection<Authority> roles = new ArrayList<>();
//        roles.add(role1);
//
//        user1.setCollectionAuthority(roles);
//
//        userService.addUser(user1);
//    }

    // get all
//    @GetMapping
//    public List<User> getAllUser(){
//        return userService.getAllUser();
//    }
//
//    //add
//    @PostMapping("/add")
//    public ResponseEntity<User> addUser(@RequestBody User user){// tu dong bien json thanh user
//        user.setId(0); //bat buoc them moi va tu phat sinh ra id khi khach hang co nhap id
//        user = userService.addUser(user);
//        return ResponseEntity.status(HttpStatus.CREATED).body(user);
//    }
//
//    // modify parent
//    @PutMapping("/modify/{id}")
//    public ResponseEntity<User> modifyUser(@PathVariable int id, @RequestBody User user){
//        User userExist = userService.getUserById(id);
//        if(userExist != null){
//            userExist.setAddress(user.getAddress());
//            userExist.setCollectionAuthority(user.getCollectionAuthority());
//            userExist.setEnabled(user.getEnabled());
//            userExist.setPassword(user.getPassword());
//            userExist.setFirstName(user.getFirstName());
//            userExist.setLastName(user.getLastName());
//            userExist.setPhoneNumber(user.getPhoneNumber());
//            userService.updateUser(userExist);
//            return ResponseEntity.ok(userExist);
//        } else {
//            try {
//                throw new Exception("Not found ScoreCard have id: "+ id);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        }
//    }
//
//
//
//    //delete
//    @DeleteMapping("/delete/{id}")
//    public ResponseEntity<User> deleteUserById(@PathVariable int id){
//        User userExist = userService.getUserById(id);
//        if(userExist != null){
//            userService.deleteUserById(id);
//            return ResponseEntity.ok().build();
//        } else {
//            try {
//                throw new Exception("Not found parent have id: "+ id);
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//        }
//    }

-- Classes
@GetMapping
    public List<Classes> showListNote(){
        return classService.getAllClasses();
    }

    @GetMapping("/{id}")
    public Classes getClassById(@PathVariable int id){
        return classService.getClassById(id);
    }

    @PostMapping("/add")
    public ResponseEntity<Classes> addNote(Classes classes){
        classes.setId(0);
        classes = classService.addClass(classes);
        return ResponseEntity.status(HttpStatus.CREATED).body(classes);
    }

    @PutMapping("/modify/{id}")
    public ResponseEntity<Classes> updateClass(@PathVariable int id, @RequestBody Classes classes){
        Classes existClasses = classService.getClassById(id);
        if(existClasses != null) {
            existClasses.setName(classes.getName());
            existClasses.setGrade(classes.getGrade());
            existClasses.setTeacherList(classes.getTeacherList());
            existClasses.setSchool(classes.getSchool());
            existClasses.setNoteBook(classes.getNoteBook());
            existClasses.setStudentList(classes.getStudentList());
            classService.updateClass(existClasses);
            return ResponseEntity.ok(existClasses);
        } else {
            try {
                throw new Exception("Not found classes have id: "+ id);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Classes> deleteClasses(@PathVariable int id){
        Classes existClasses = classService.getClassById(id);
        if(existClasses != null){
            classService.deleteClassById(id);
            return ResponseEntity.ok().build();
        } else{
            try {
                throw new Exception("Not found classes have id: "+ id);
            } catch (Exception e){
                throw new RuntimeException(e);
            }
        }
    }
    ---NOTE
    @GetMapping
        public List<NoteBook> showListNote(){
            return notebookService.getAllNoteBooks();
        }

        @GetMapping("/{id}")
        public NoteBook getNoteById(@PathVariable int id){
            return notebookService.getNoteBookById(id);
        }

        @PostMapping("/add")
        public ResponseEntity<NoteBook> addNote(@RequestBody NoteBook noteBook){
            noteBook.setId(0);
            noteBook = notebookService.addNoteBook(noteBook);
            return ResponseEntity.status(HttpStatus.CREATED).body(noteBook);
        }

        @PutMapping("/modify/{id}")
        public ResponseEntity<NoteBook> updateNote(@PathVariable int id, @RequestBody NoteBook noteBook){
            NoteBook existNoteBook = notebookService.getNoteBookById(id);
            if(existNoteBook != null) {
                existNoteBook.setClasses(noteBook.getClasses());
                existNoteBook.setTeacherList(noteBook.getTeacherList());
                existNoteBook.setContentLecture(noteBook.getContentLecture());
                existNoteBook.setTeachingDay(noteBook.getTeachingDay());
                existNoteBook.setTeacherComment(noteBook.getTeacherComment());
                notebookService.updateNoteBook(existNoteBook);
                return ResponseEntity.ok(existNoteBook);
            } else {
                try {
                    throw new Exception("Not found notebook have id: "+ id);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }

        @DeleteMapping("/delete/{id}")
        public ResponseEntity<NoteBook> deleteNoteBook(@PathVariable int id){
            NoteBook existNote = notebookService.getNoteBookById(id);
            if(existNote != null){
                notebookService.deleteNoteBookById(id);
                return ResponseEntity.ok().build();
            } else{
                try {
                    throw new Exception("Not found notebook have id: "+ id);
                } catch (Exception e){
                    throw new RuntimeException(e);
                }
            }
        }

-- SUBJECT
// get all
    @GetMapping
    public List<Subject> getAllSubject(){
        return subjectService.getAllSubject();
    }

    //add
    @PostMapping("/add")
    public ResponseEntity<Subject> addSubject(@RequestBody Subject subject){// tu dong bien json thanh students
        subject.setId(0); //bat buoc them moi va tu phat sinh ra id khi khach hang co nhap id
        subject = subjectService.addSubject(subject);
        return ResponseEntity.status(HttpStatus.CREATED).body(subject);
    }

    // modify parent
    @PutMapping("/modify/{id}")
    public ResponseEntity<Subject> modifySubject(@PathVariable int id, @RequestBody Subject subject){
        Subject subjectExist = subjectService.getSubjectById(id);
        if(subjectExist != null){
            subjectExist.setNameSubject(subject.getNameSubject());
            subjectExist.setSchoolList(subject.getSchoolList());
            subjectExist.setTranscript(subject.getTranscript());
            subjectExist.setStudentList(subject.getStudentList());
            subjectExist.setTeacherList(subject.getTeacherList());
            subjectExist.setScoreCard(subject.getScoreCard());
            subjectService.updateSubject(subjectExist);
            return ResponseEntity.ok(subjectExist);
        } else {
            try {
                throw new Exception("Not found ScoreCard have id: "+ id);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    //delete
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Subject> deleteSubjectById(@PathVariable int id){
        Subject subjectExist = subjectService.getSubjectById(id);
        if(subjectExist != null){
            subjectService.deleteSubjectById(id);
            return ResponseEntity.ok().build();
        } else {
            try {
                throw new Exception("Not found parent have id: "+ id);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }